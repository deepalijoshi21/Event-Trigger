--------------------Insert Ticket for CSV Attached in Email Using Email Service & Send back error CSV file to Email Address----------------------
global class CreateTicketConcert implements Messaging.InboundEmailHandler {
	global Messaging.InboundEmailResult handleInboundEmail(Messaging.inboundEmail email, 
                                                       Messaging.InboundEnvelope env){
 
        // Create an InboundEmailResult object for returning the result of the 
        // Apex Email Service
        Messaging.InboundEmailResult result = new Messaging.InboundEmailResult();
        String myPlainText= '';
        // Store the email plain text into the local variable 
        myPlainText = email.plainTextBody;
       
        // Check if there is an attachment in the email
        if(email.binaryAttachments != null && email.binaryAttachments.size() > 0) {
        // Iterate through the attachments to find the CSV file
        for(Messaging.Inboundemail.BinaryAttachment attachment : email.binaryAttachments) {
            // Check if the attachment is a CSV file
            if(attachment.fileName.endsWith('.csv')) {
                // Convert the CSV file to a string
                String csvString = attachment.body.toString();
                // Split the string into rows
                List<String> rows = csvString.split('\n');
                rows.remove(0);
                // Create a set to store the unique concert names from the CSV
                    Set<String> concertNames = new Set<String>();
                    // Iterate through the rows to find the Concert Name, Contact Id, and No of Seats columns
                    for (String row : rows) {
                        List<String> columns = row.split(',');
                        String concertName = columns[0];
                        String contactId = columns[1];
                        String noOfSeatsStr = columns[2].trim(); // remove leading spaces
                        System.debug('noOfSeatsStr: ' + noOfSeatsStr);
                        Integer noOfSeats = Integer.valueOf(noOfSeatsStr);
                        // Add the concert name to the set
                        concertNames.add(concertName);
                    }
                    
                    // Query the Concert object to get the concert IDs based on the concert names
                    List<Concert__c> concerts = [SELECT Id, Name, Venue__c,Event_Date__c FROM Concert__c WHERE Name IN: concertNames];
                    
                    // Create a map to store the concert IDs by name
                    Map<String, Id> concertIdsByName = new Map<String, Id>();
                    for (Concert__c concert : concerts) {
                        concertIdsByName.put(concert.Name, concert.Id);
                    }

                    // Iterate through the rows to create new tickets
                    List<Ticket__c> Ticketlist = new List<Ticket__c>();
                	List<String> errors = new List<String>();
                	String errorCsv = 'Concert Name, Contact Id, No. of Seats, Message, Status\n';
                    for (String row : rows) {
                        List<String> columns = row.split(',');
                        String concertName = columns[0];
                        String contactId = columns[1];
                        String noOfSeatsStr = columns[2].trim();
                        Integer noOfSeats = Integer.valueOf(noOfSeatsStr);
                        Id concert = concertIdsByName.get(concertName);
                        if (concert != null && contactId != null) {
                            Ticket__c tc = new Ticket__c();
        					tc.Concert__c = concert;
                            tc.Customer__c = contactId;
                            tc.Number_Of_Tickets__c = noOfSeats;
                            Ticketlist.add(tc);
                            
                    	} 
                    }
                // Insert the records and get the save results
                List<Database.SaveResult> saveResults = database.insert(Ticketlist, false);
                
                // Iterate through each returned result
                for (Integer i = 0; i < saveResults.size(); i++) {
                    Database.SaveResult sr = saveResults[i];
                    String row = rows[i];
                    
                    if (sr.isSuccess()) {
                        // Operation was successful, so get the ID of the record that was processed
                        String ticketId = sr.getId();
                        errorCsv += row +' , '+ 'Success'+' , '+  ticketId + '\n';
                    } else {
                        // Operation failed, so get all errors
                        for(Database.Error err : sr.getErrors()) {
                            errorCsv += row +' , '+ 'Error'+' , '+  err.getMessage() + '\n';
                        }
                    }
                }

                // Email the error CSV to the sender
                  	if (errorCsv != '') {
                         Messaging.SingleEmailMessage message = new Messaging.SingleEmailMessage();
                         String[] toAddresses = new String[] {email.fromAddress};
                         message.setToAddresses(toAddresses);
                         message.setSubject('Ticket import error report');
                         // Create the CSV attachment
                         Messaging.EmailFileAttachment csvAttachment = new Messaging.EmailFileAttachment();
                         csvAttachment.setFileName('ImportError.csv');
                         csvAttachment.setBody(Blob.valueOf(errorCsv));
                         message.setFileAttachments(new Messaging.EmailFileAttachment[] {csvAttachment});
                         message.setPlainTextBody('The following records could not be imported:\n\n');
                         Messaging.SendEmailResult[] results = Messaging.sendEmail(new Messaging.SingleEmailMessage[] {message});
                         if (results[0].isSuccess()) {
                            System.debug('Email sent successfully.');
                        } else {
                            System.debug('Failed to send email: ' + results[0].getErrors()[0].getMessage());
                        }
                     }
				}
			}
		}
        // Return the result for the Apex Email Service 
      
      	return result;
	}
}
